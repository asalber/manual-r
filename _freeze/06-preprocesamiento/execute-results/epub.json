{
  "hash": "b49841ef938a34790e814dae516a08bf",
  "result": {
    "markdown": "---\nlang: es\n---\n\n\n\n\n# Preprocesamiento de datos\n\nCualquier análisis de datos comienza con la carga de datos en un _data frame_. Normalmente los datos brutos deben limpiarse y prepararse para su análisis. Este proceso se conoce como preprocesamiento de datos y suele incluir las siguientes tareas:\n\n- Reestructuración del data frame.\n- Selección de las variables (columnas) de interés.\n- Filtrado de los casos (filas) de interés.\n- Cálculo de nuevas variables a partir de las existentes.\n- Ordenación de datos.\n- Agrupación de datos.\n- Tratamiento de datos no disponibles (`NA`, `NaN`).\n\nEstas tareas pueden realizarse con las funciones básicas de R pero actualmente existen paquetes que facilitan mucho su realización como por ejemplo la colección de paquetes `tidyverse`.\n\n## La colección de paquetes `tidyverse`\n\n[`tidyverse`](https://www.tidyverse.org/) es una colección de paquetes para la Ciencia de Datos. Incluye los siguientes paquetes:\n\n- `tibble`: Define la estructura de datos `tibble` que es una versión mejorada de los `data frames`. \n- `readr`: Proporciona funciones para la lectura y escritura de tablas de datos en formato plano `csv` y `tsv`.\n- `tidyr`: Proporciona funciones para la limpieza y preparación de los datos de manera consistente.\n- `dplyr`: Proporciona una gramática de funciones para la manipulación de datos y las tareas más habituales de preprocesamiento.\n- `stringr`: Proporciona funciones especializadas en la manipulación de cadenas.\n- `forcats`: Proporciona funciones especializadas en la manipulación de factores.\n- `purrr`: Proporciona funciones para la programación funcional que mejoran las ya existentes en R.\n- `ggplot2`: Proporciona una gramática de funciones para la realización de gráficos.\n\nEstos paquetes están diseñados bajo una misma filosofía por lo interactúan y se complementan a la perfección.\n\n## Tibbles\n\nEl paquete `tibble` define la estructura de datos _tibble_ que es similiar a los data frames, pero optimizada, ya que realiza una carga en memoria y evaluación perezosa, lo que hace más eficiente el manejo de grandes volúmenes de datos estructurados en forma de tabla. Los tibbles, además, suelen dar más información sobre el contenido y la estructura de los datos, así como de incoherencias en los datos. \n\nLos tibbles nunca cambian el tipo de los datos (por ejemplo de cadenas a factores), nunca cambian los nombres de las variables, ni crean nombres de filas, como suelen hacer los data frames.\n\nAunque los paquetes de `tidyverse` trabajan perfectamente con data frames, están optimizados para trabajar con tibbles.\n\nPara convertir un data frame en un tibble se utiliza la función \n\n- `as_tibble(df)`: Convierte el data frame `df` en un tibble.\n\n:::{#exm-creacion-tibble}\n\n\n\n::: {.cell hash='06-preprocesamiento_cache/epub/unnamed-chunk-1_111390dae1baa31957398cfbd6cec2a3'}\n\n```{.r .cell-code}\nlibrary(tibble)\ndf <- data.frame(asignatura = c(\"Matemáticas\", \"Física\", \"Economía\"), nota = c(8.5, 7, 4.5))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   asignatura nota\n1 Matemáticas  8.5\n2      Física  7.0\n3    Economía  4.5\n```\n:::\n\n```{.r .cell-code}\nas_tibble(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  asignatura   nota\n  <chr>       <dbl>\n1 Matemáticas   8.5\n2 Física        7  \n3 Economía      4.5\n```\n:::\n:::\n\n\n\n:::\n\nAl igual que los data frames, las columnas de los tibbles son vectores cuyos elementos son del mismo tipo, de manera que suelen representar variables en los estudios estadísticos, mientras que las filas representan individuos, aunque no siempre es así.\n\n## Conjuntos de datos ordenados\n\nExisten dos formas habituales de disponer los datos de un estudio en un data frame o un tibble: formato ancho y formato largo.\n\n![Formatos de un data frame](img/05-preprocesamiento/formatos-dataframe.png)\n\nLa mayoría de los paquetes de `tidyverse` asumen que los datos del data frame o tibble están en formado largo, lo que significa que las columnas del data frame representan variables y las filas observaciones, de manera que cada dato pertenece a una variable y una observación única. Las variables (columnas) contienen valores que miden la misma característica o atributo (edad, estatura, etc.) en cada unidad experimental. Una observación (fila) contiene los valores medidos en la misma unidad experimental (una persona, un día, etc.) en todos atributos estudiados. En resumen, un data frame o tibble esta ordenado (_tidy_) si \n\n- Cada columna es una variable\n- Cada fila es una observación\n- Cada casilla es un valor\n\nA menudo los conjuntos de datos no están ordenados y violan alguna de de estas condiciones. Lo más común es encontrarnos \n\n- Encabezados de columnas que son valores en lugar de variables.\n- Una misma columna contiene varias variables.\n- Variables que están almacenadas tanto en filas como en columnas.\n\nPara facilitar el preprocesamiento y posterior análisis de los datos es recomendable ordenar el data frame. Para ello el paquete `tidyr` proporciona dos funciones que permiten pivotar un data frame:\n\n- `pivot_longer(df, columnas, names_to = columna-nombres, values_to = columna-valores)`: Devuelve el tibble que resulta de convertir las columnas indicadas en el parámetro `columnas` del data frame `df` a formato largo, es decir, las columnas se reestructuran en dos nuevas columnas con nombres `columna-nombres` y `columna-valores` que contienen los nombres de las columnas originales y sus valores, respectivamente.\n\n- `pivot_wider(df, names_from = columna-nombres, values_from = columna-valores)`: Devuelve el tibble que resulta de convertir el data frame `df` a formato ancho, es decir, se crean tantas columnas como nombres distintos haya en la columna `columna-nombres`, usando estos nombres como los nombres de las columnas, mientras que los valores se toman de la columna `columna-valores`.\n\n\n:::{#exm-pivotar-formato-ancho-a-largo}\n\n\n\n::: {.cell hash='06-preprocesamiento_cache/epub/unnamed-chunk-2_764fce127797f0aca50c69440de333ad'}\n\n```{.r .cell-code}\nlibrary(tidyr)\ndf <- data.frame(nombre = c('María', 'Luis', 'Carmen'), \nedad = c(18, 22, 20), \nMatemáticas = c(8.5, 7, 3.5),\nEconomía = c(8, 6.5, 5),\nProgramación = c(6.5, 4, 9))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  nombre edad Matemáticas Economía Programación\n1  María   18         8.5      8.0          6.5\n2   Luis   22         7.0      6.5          4.0\n3 Carmen   20         3.5      5.0          9.0\n```\n:::\n\n```{.r .cell-code}\n# Pivotar de formato ancho a formato largo\ndf_largo <- pivot_longer(df, Matemáticas:Programación, names_to = \"Asignatura\", values_to = \"Nota\")\ndf_largo\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 4\n  nombre  edad Asignatura    Nota\n  <chr>  <dbl> <chr>        <dbl>\n1 María     18 Matemáticas    8.5\n2 María     18 Economía       8  \n3 María     18 Programación   6.5\n4 Luis      22 Matemáticas    7  \n5 Luis      22 Economía       6.5\n6 Luis      22 Programación   4  \n7 Carmen    20 Matemáticas    3.5\n8 Carmen    20 Economía       5  \n9 Carmen    20 Programación   9  \n```\n:::\n\n```{.r .cell-code}\n# Pivotar de formato largo a formato ancho\ndf_ancho <- pivot_wider(df_largo, names_from = Asignatura, values_from = Nota)\ndf_ancho\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 5\n  nombre  edad Matemáticas Economía Programación\n  <chr>  <dbl>       <dbl>    <dbl>        <dbl>\n1 María     18         8.5      8            6.5\n2 Luis      22         7        6.5          4  \n3 Carmen    20         3.5      5            9  \n```\n:::\n:::\n\n\n\n:::\n\n## El paquete `dplyr`\n\nEl paquete `dplyr` proporciona una gramática para el preprocesamiento de data frames o tibbles, de manera que cada acción sobre data frame se corresponde con un verbo y las funciones que realizan esa acción tienen como nombre el verbo correspondiente. Las funciones de preprocesamiento más habituales incluidas en el paquete `dplyr` son:\n\n- `count`: Cuenta el número de observaciones de un data frame.\n- `select`: Selecciona un subconjunto de columnas de un data frame.\n- `filter`: Selecciona un subconjunto de filas de un data frame.\n- `arrange`: Reordena las filas de un data frame.\n- `rename`: Renombra las columnas de un data frame.\n- `mutate`: Añade nuevas columnas a un data frame o transforma las existentes.\n- `summarise`: Genera resúmenes estadísticos de las columnas de un data frame.\n- `group_by`: Divide las filas de un data frame en grupos de acuerdo a una columna categórica.\n\n## Conteo del número de observaciones\n\nPara contar el número de observaciones (filas) de un data frame se utiliza la función \n\n- `count(df, columnas)`: Devuelve el número de filas del data frame `df` para cada posible combinación de los valores de las columnas indicadas en el parámetro `columnas`.\n\nEsta función se utiliza habitualmente para calcular tamaños muestrales.\n\n:::{#exm-count-1}\n\n\n\n::: {.cell hash='06-preprocesamiento_cache/epub/unnamed-chunk-3_b89d6f156652a97469ff27ad68649e7b'}\n\n```{.r .cell-code}\nlibrary(dplyr)\ndf <- read.csv('https://raw.githubusercontent.com/asalber/manual-r/master/datos/colesterol.csv')\n# Contar las filas del data frame\ncount(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   n\n1 14\n```\n:::\n:::\n\n\n\n:::\n\n:::{#exm-count-2}\n\n\n\n::: {.cell hash='06-preprocesamiento_cache/epub/unnamed-chunk-4_f664308f788226dc63bc89cdf50ce4a1'}\n\n```{.r .cell-code}\nlibrary(dplyr)\ndf <- read.csv('https://raw.githubusercontent.com/asalber/manual-r/master/datos/colesterol.csv')\n# Contar las filas del data frame\ncount(df, sexo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  sexo n\n1    H 8\n2    M 6\n```\n:::\n:::\n\n\n\n:::\n\n## Selección de variables\n\nPara seleccionar un subconjunto de variables de un data frame se utiliza la función\n\n- `select(df, columnas)`: Devuelve un tibble con las columnas indicadas en el parámetro `columnas` del data frame `df`.\n\n:::{#exm-select}\n\n\n\n::: {.cell hash='06-preprocesamiento_cache/epub/unnamed-chunk-5_8d04afd2a9cdcd058702c06c9772f31a'}\n\n```{.r .cell-code}\nlibrary(dplyr)\ndf <- read.csv('https://raw.githubusercontent.com/asalber/manual-r/master/datos/colesterol.csv')\n# Seleccionar las columnas nombre, sexo y edad\nselect(df, nombre, sexo, edad)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                            nombre sexo edad\n1     José Luis Martínez Izquierdo    H   18\n2                   Rosa Díaz Díaz    M   32\n3            Javier García Sánchez    H   24\n4              Carmen López Pinzón    M   35\n5             Marisa López Collado    M   46\n6                Antonio Ruiz Cruz    H   68\n7          Antonio Fernández Ocaña    H   51\n8            Pilar Martín González    M   22\n9             Pedro Gálvez Tenorio    H   35\n10         Santiago Reillo Manzano    H   46\n11           Macarena Álvarez Luna    M   53\n12      José María de la Guía Sanz    H   58\n13 Miguel Angel Cuadrado Gutiérrez    H   27\n14           Carolina Rubio Moreno    M   20\n```\n:::\n\n```{.r .cell-code}\n# Seleccionar la primera y tercera columnas\nselect(df, 1, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                            nombre sexo\n1     José Luis Martínez Izquierdo    H\n2                   Rosa Díaz Díaz    M\n3            Javier García Sánchez    H\n4              Carmen López Pinzón    M\n5             Marisa López Collado    M\n6                Antonio Ruiz Cruz    H\n7          Antonio Fernández Ocaña    H\n8            Pilar Martín González    M\n9             Pedro Gálvez Tenorio    H\n10         Santiago Reillo Manzano    H\n11           Macarena Álvarez Luna    M\n12      José María de la Guía Sanz    H\n13 Miguel Angel Cuadrado Gutiérrez    H\n14           Carolina Rubio Moreno    M\n```\n:::\n\n```{.r .cell-code}\n# Seleccionar las columnas desde el peso hasta el colesterol\nselect(df, peso:colesterol)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   peso altura colesterol\n1    85   1.79        182\n2    65   1.73        232\n3    NA   1.81        191\n4    65   1.70        200\n5    51   1.58        148\n6    66   1.74        249\n7    62   1.72        276\n8    60   1.66         NA\n9    90   1.94        241\n10   75   1.85        280\n11   55   1.62        262\n12   78   1.87        198\n13  109   1.98        210\n14   61   1.77        194\n```\n:::\n\n```{.r .cell-code}\n# Seleccionar todas las columnas menos la edad\nselect(df, -edad)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                            nombre sexo peso altura colesterol\n1     José Luis Martínez Izquierdo    H   85   1.79        182\n2                   Rosa Díaz Díaz    M   65   1.73        232\n3            Javier García Sánchez    H   NA   1.81        191\n4              Carmen López Pinzón    M   65   1.70        200\n5             Marisa López Collado    M   51   1.58        148\n6                Antonio Ruiz Cruz    H   66   1.74        249\n7          Antonio Fernández Ocaña    H   62   1.72        276\n8            Pilar Martín González    M   60   1.66         NA\n9             Pedro Gálvez Tenorio    H   90   1.94        241\n10         Santiago Reillo Manzano    H   75   1.85        280\n11           Macarena Álvarez Luna    M   55   1.62        262\n12      José María de la Guía Sanz    H   78   1.87        198\n13 Miguel Angel Cuadrado Gutiérrez    H  109   1.98        210\n14           Carolina Rubio Moreno    M   61   1.77        194\n```\n:::\n:::\n\n\n\n:::\n\n## Filtrado de datos\n\nPara filtrar un data frame y quedarse con las filas que cumplen una condición se usa la función\n\n- `filter(df, condicion)`: Devuelve el tibble con las filas del data frame `df` que cumplen la condición indicada en el parámetro `condición`.\n\n:::{#exm-filter}\n\n\n\n::: {.cell hash='06-preprocesamiento_cache/epub/unnamed-chunk-6_673c0d373a8f27f313c0d179d02f812e'}\n\n```{.r .cell-code}\nlibrary(dplyr)\ndf <- read.csv('https://raw.githubusercontent.com/asalber/manual-r/master/datos/colesterol.csv')\n# Filtrar las mujeres\nfilter(df, sexo == \"M\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 nombre edad sexo peso altura colesterol\n1        Rosa Díaz Díaz   32    M   65   1.73        232\n2   Carmen López Pinzón   35    M   65   1.70        200\n3  Marisa López Collado   46    M   51   1.58        148\n4 Pilar Martín González   22    M   60   1.66         NA\n5 Macarena Álvarez Luna   53    M   55   1.62        262\n6 Carolina Rubio Moreno   20    M   61   1.77        194\n```\n:::\n\n```{.r .cell-code}\n# Filtrar los hombres mayores de 30 \nfilter(df, sexo == \"H\" & edad > 30)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                      nombre edad sexo peso altura colesterol\n1          Antonio Ruiz Cruz   68    H   66   1.74        249\n2    Antonio Fernández Ocaña   51    H   62   1.72        276\n3       Pedro Gálvez Tenorio   35    H   90   1.94        241\n4    Santiago Reillo Manzano   46    H   75   1.85        280\n5 José María de la Guía Sanz   58    H   78   1.87        198\n```\n:::\n\n```{.r .cell-code}\n# Filtrar las filas con valores de colesterol\nfilter(df, !is.na(colesterol))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                            nombre edad sexo peso altura colesterol\n1     José Luis Martínez Izquierdo   18    H   85   1.79        182\n2                   Rosa Díaz Díaz   32    M   65   1.73        232\n3            Javier García Sánchez   24    H   NA   1.81        191\n4              Carmen López Pinzón   35    M   65   1.70        200\n5             Marisa López Collado   46    M   51   1.58        148\n6                Antonio Ruiz Cruz   68    H   66   1.74        249\n7          Antonio Fernández Ocaña   51    H   62   1.72        276\n8             Pedro Gálvez Tenorio   35    H   90   1.94        241\n9          Santiago Reillo Manzano   46    H   75   1.85        280\n10           Macarena Álvarez Luna   53    M   55   1.62        262\n11      José María de la Guía Sanz   58    H   78   1.87        198\n12 Miguel Angel Cuadrado Gutiérrez   27    H  109   1.98        210\n13           Carolina Rubio Moreno   20    M   61   1.77        194\n```\n:::\n:::\n\n\n\n:::\n\nExiste un filtro bastante habitual que consiste en eliminar las filas de un data frame que contienen algún dado no disponible (`NA`). Para ello `dplyr` dispone de la función \n\n- `na.omit(df)`: Devuelve el tibble que resulta de eliminar las filas del data frame `df` con algún valor `NA`.\n\n:::{#exm-filter-na}\n\n\n\n::: {.cell hash='06-preprocesamiento_cache/epub/unnamed-chunk-7_2cb1dbc56ae57d766fa6cc23cd2f3b0c'}\n\n```{.r .cell-code}\nna.omit(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                            nombre edad sexo peso altura colesterol\n1     José Luis Martínez Izquierdo   18    H   85   1.79        182\n2                   Rosa Díaz Díaz   32    M   65   1.73        232\n4              Carmen López Pinzón   35    M   65   1.70        200\n5             Marisa López Collado   46    M   51   1.58        148\n6                Antonio Ruiz Cruz   68    H   66   1.74        249\n7          Antonio Fernández Ocaña   51    H   62   1.72        276\n9             Pedro Gálvez Tenorio   35    H   90   1.94        241\n10         Santiago Reillo Manzano   46    H   75   1.85        280\n11           Macarena Álvarez Luna   53    M   55   1.62        262\n12      José María de la Guía Sanz   58    H   78   1.87        198\n13 Miguel Angel Cuadrado Gutiérrez   27    H  109   1.98        210\n14           Carolina Rubio Moreno   20    M   61   1.77        194\n```\n:::\n:::\n\n\n\n:::\n\n## Reordenación de datos\n\nPara reordenar las filas de un data frame se utiliza la función\n\n- `arrange(df, columnas)`: Devuelve un tibble con las mismas filas del data frame `df` pero ordenadas de acuerdo a los valores de las columnas indicadas en el parámetro `columnas`. Por defecto, la ordenación es ascendente, para hacerla descendente, hay que aplicar la función `desc()` a la columna con respecto se quiere ordenar descendentemente.\n\n:::{#exm-arrange}\n\n\n\n::: {.cell hash='06-preprocesamiento_cache/epub/unnamed-chunk-8_ed143b473e3cc764a5204ecf0a5791c7'}\n\n```{.r .cell-code}\nlibrary(dplyr)\ndf <- read.csv('https://raw.githubusercontent.com/asalber/manual-r/master/datos/colesterol.csv')\n# Ordenar según alfabéticamente por nombre\narrange(df, nombre)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                            nombre edad sexo peso altura colesterol\n1          Antonio Fernández Ocaña   51    H   62   1.72        276\n2                Antonio Ruiz Cruz   68    H   66   1.74        249\n3              Carmen López Pinzón   35    M   65   1.70        200\n4            Carolina Rubio Moreno   20    M   61   1.77        194\n5            Javier García Sánchez   24    H   NA   1.81        191\n6     José Luis Martínez Izquierdo   18    H   85   1.79        182\n7       José María de la Guía Sanz   58    H   78   1.87        198\n8            Macarena Álvarez Luna   53    M   55   1.62        262\n9             Marisa López Collado   46    M   51   1.58        148\n10 Miguel Angel Cuadrado Gutiérrez   27    H  109   1.98        210\n11            Pedro Gálvez Tenorio   35    H   90   1.94        241\n12           Pilar Martín González   22    M   60   1.66         NA\n13                  Rosa Díaz Díaz   32    M   65   1.73        232\n14         Santiago Reillo Manzano   46    H   75   1.85        280\n```\n:::\n\n```{.r .cell-code}\n# Ordenar según sexo y edad\narrange(df, sexo, edad)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                            nombre edad sexo peso altura colesterol\n1     José Luis Martínez Izquierdo   18    H   85   1.79        182\n2            Javier García Sánchez   24    H   NA   1.81        191\n3  Miguel Angel Cuadrado Gutiérrez   27    H  109   1.98        210\n4             Pedro Gálvez Tenorio   35    H   90   1.94        241\n5          Santiago Reillo Manzano   46    H   75   1.85        280\n6          Antonio Fernández Ocaña   51    H   62   1.72        276\n7       José María de la Guía Sanz   58    H   78   1.87        198\n8                Antonio Ruiz Cruz   68    H   66   1.74        249\n9            Carolina Rubio Moreno   20    M   61   1.77        194\n10           Pilar Martín González   22    M   60   1.66         NA\n11                  Rosa Díaz Díaz   32    M   65   1.73        232\n12             Carmen López Pinzón   35    M   65   1.70        200\n13            Marisa López Collado   46    M   51   1.58        148\n14           Macarena Álvarez Luna   53    M   55   1.62        262\n```\n:::\n\n```{.r .cell-code}\n# Ordenar ascendentemente por sexo y descendentemente por colesterol\narrange(df, sexo, desc(colesterol))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                            nombre edad sexo peso altura colesterol\n1          Santiago Reillo Manzano   46    H   75   1.85        280\n2          Antonio Fernández Ocaña   51    H   62   1.72        276\n3                Antonio Ruiz Cruz   68    H   66   1.74        249\n4             Pedro Gálvez Tenorio   35    H   90   1.94        241\n5  Miguel Angel Cuadrado Gutiérrez   27    H  109   1.98        210\n6       José María de la Guía Sanz   58    H   78   1.87        198\n7            Javier García Sánchez   24    H   NA   1.81        191\n8     José Luis Martínez Izquierdo   18    H   85   1.79        182\n9            Macarena Álvarez Luna   53    M   55   1.62        262\n10                  Rosa Díaz Díaz   32    M   65   1.73        232\n11             Carmen López Pinzón   35    M   65   1.70        200\n12           Carolina Rubio Moreno   20    M   61   1.77        194\n13            Marisa López Collado   46    M   51   1.58        148\n14           Pilar Martín González   22    M   60   1.66         NA\n```\n:::\n:::\n\n\n\n:::\n\n## Renombrado de columnas\n\nPara cambiar el nombre de las columnas se utiliza la función \n\n- `rename(df, nuevo-nombre = columna)`: Devuelve un tibble con los mismos datos del data frame `df` pero cambiando el nombre de la columna de nombre `columna` por `nuevo-nombre`.\n\n:::{#exm-rename}\n\n\n\n::: {.cell hash='06-preprocesamiento_cache/epub/unnamed-chunk-9_ee664057868e90b46a55cbd48505588f'}\n\n```{.r .cell-code}\nlibrary(dplyr)\ndf <- read.csv('https://raw.githubusercontent.com/asalber/manual-r/master/datos/colesterol.csv')\n# Ordenar según alfabéticamente por nombre\nrename(df, estatura = altura)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                            nombre edad sexo peso estatura colesterol\n1     José Luis Martínez Izquierdo   18    H   85     1.79        182\n2                   Rosa Díaz Díaz   32    M   65     1.73        232\n3            Javier García Sánchez   24    H   NA     1.81        191\n4              Carmen López Pinzón   35    M   65     1.70        200\n5             Marisa López Collado   46    M   51     1.58        148\n6                Antonio Ruiz Cruz   68    H   66     1.74        249\n7          Antonio Fernández Ocaña   51    H   62     1.72        276\n8            Pilar Martín González   22    M   60     1.66         NA\n9             Pedro Gálvez Tenorio   35    H   90     1.94        241\n10         Santiago Reillo Manzano   46    H   75     1.85        280\n11           Macarena Álvarez Luna   53    M   55     1.62        262\n12      José María de la Guía Sanz   58    H   78     1.87        198\n13 Miguel Angel Cuadrado Gutiérrez   27    H  109     1.98        210\n14           Carolina Rubio Moreno   20    M   61     1.77        194\n```\n:::\n:::\n\n\n\n:::\n\n## Creación de nuevas columnas o transformación de las existentes\n\nPara crear una nueva columna a partir de otras columnas del data frame se utiliza la función\n\n- `mutate(df, columna = formula)`: Devuelve el tibble que resulta de añadir una nueva columna al data frame `df` con el resultado de aplicar el procedimiento indicado por `formula` y con el nombre indicado en `columna`. Si `columna` es el nombre de una columna ya existente, entonces esa columna se reescribe con los resultados de aplicar la `formula`.\n\n:::{#exm-mutate}\n\n\n\n::: {.cell hash='06-preprocesamiento_cache/epub/unnamed-chunk-10_38ec1a10f8715d4f3acc1c33bc1dc53b'}\n\n```{.r .cell-code}\nlibrary(dplyr)\ndf <- read.csv('https://raw.githubusercontent.com/asalber/manual-r/master/datos/colesterol.csv')\n# Cambiar las unidades de la altura a centímetros\nmutate(df, altura = altura*100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                            nombre edad sexo peso altura colesterol\n1     José Luis Martínez Izquierdo   18    H   85    179        182\n2                   Rosa Díaz Díaz   32    M   65    173        232\n3            Javier García Sánchez   24    H   NA    181        191\n4              Carmen López Pinzón   35    M   65    170        200\n5             Marisa López Collado   46    M   51    158        148\n6                Antonio Ruiz Cruz   68    H   66    174        249\n7          Antonio Fernández Ocaña   51    H   62    172        276\n8            Pilar Martín González   22    M   60    166         NA\n9             Pedro Gálvez Tenorio   35    H   90    194        241\n10         Santiago Reillo Manzano   46    H   75    185        280\n11           Macarena Álvarez Luna   53    M   55    162        262\n12      José María de la Guía Sanz   58    H   78    187        198\n13 Miguel Angel Cuadrado Gutiérrez   27    H  109    198        210\n14           Carolina Rubio Moreno   20    M   61    177        194\n```\n:::\n\n```{.r .cell-code}\n# Calcular el índice de masa corporal\nmutate(df, imc = round(peso/altura^2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                            nombre edad sexo peso altura colesterol imc\n1     José Luis Martínez Izquierdo   18    H   85   1.79        182  27\n2                   Rosa Díaz Díaz   32    M   65   1.73        232  22\n3            Javier García Sánchez   24    H   NA   1.81        191  NA\n4              Carmen López Pinzón   35    M   65   1.70        200  22\n5             Marisa López Collado   46    M   51   1.58        148  20\n6                Antonio Ruiz Cruz   68    H   66   1.74        249  22\n7          Antonio Fernández Ocaña   51    H   62   1.72        276  21\n8            Pilar Martín González   22    M   60   1.66         NA  22\n9             Pedro Gálvez Tenorio   35    H   90   1.94        241  24\n10         Santiago Reillo Manzano   46    H   75   1.85        280  22\n11           Macarena Álvarez Luna   53    M   55   1.62        262  21\n12      José María de la Guía Sanz   58    H   78   1.87        198  22\n13 Miguel Angel Cuadrado Gutiérrez   27    H  109   1.98        210  28\n14           Carolina Rubio Moreno   20    M   61   1.77        194  19\n```\n:::\n:::\n\n\n\n:::\n\n## Resumen de datos\n\nPara aplicar una función resumen a una o varias columnas de un data frame se utiliza la función\n\n- `sumarise(df, nombre-columna = funcion-resumen(columnas))`: Devuelve el tibble con la columna de nombre `nombre-columna` y el valor que resulta de aplicar la función indicada en `funcion-resumen` a las columnas del data frame `df` indicadas en `columnas`.\n\n:::{#exm-sumarise}\n\n\n\n::: {.cell hash='06-preprocesamiento_cache/epub/unnamed-chunk-11_d526a06e3282c2b7a0c167afcb566acc'}\n\n```{.r .cell-code}\nlibrary(dplyr)\ndf <- read.csv('https://raw.githubusercontent.com/asalber/manual-r/master/datos/colesterol.csv')\n# Calcular la media de la edad\nsummarise(df, edad_media = mean(edad))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  edad_media\n1   38.21429\n```\n:::\n\n```{.r .cell-code}\n# Calcular la media y la desviación típica del colesterol\nsummarise(df, media = mean(colesterol, na.rm=T), sd = sd(colesterol, na.rm=T))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     media       sd\n1 220.2308 39.84795\n```\n:::\n:::\n\n\n\n:::\n\n## Resúmenes por grupos\n\nLa función `summarise` suele combinarse con la siguiente función para obtener resúmenes estratificados por grupos.\n\n- `group_by(df, columnas)`: Devuelve un tibble estratificado de acuerdo a las categorías de las columnas indicadas en `columnas`. En combinación con la función `summarise` permite hacer resúmenes estadísticos por grupos.\n\n:::{#exm-group_by}\n\n\n\n::: {.cell hash='06-preprocesamiento_cache/epub/unnamed-chunk-12_a04ab970892e5f4fcdc8430b4ed41c1b'}\n\n```{.r .cell-code}\nlibrary(dplyr)\ndf <- read.csv('https://raw.githubusercontent.com/asalber/manual-r/master/datos/colesterol.csv')\n# Estratificar por sexo \ndf.sexo <- group_by(df, sexo)\n# Edades medias por sexo\nsummarise(df.sexo, edad_media = mean(edad))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  sexo  edad_media\n  <chr>      <dbl>\n1 H           40.9\n2 M           34.7\n```\n:::\n\n```{.r .cell-code}\n# Media y desviación típica del colesterol por sexo\nsummarise(df.sexo, media = mean(colesterol, na.rm=T), sd = sd(colesterol, na.rm=T))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n  sexo  media    sd\n  <chr> <dbl> <dbl>\n1 H      228.  38.4\n2 M      207.  42.9\n```\n:::\n:::\n\n\n\n:::\n\n## Composición de operaciones mediante tuberías\n\n`dplyr` permite componer varias operaciones sobre un data frame mediante el operador `%>%` (_pipe_), de manera que el data frame que resulta de aplicar una operación se convierte en el data frame de entrada para otra, siguiendo el esquema\n\n`df %>% operación-1 %>% operación-2 %>% ... `\n\nCuando se utilizan tuberías para componer operaciones de esta forma, no es necesario indicar el data frame como parámetro de la función que define la acción ya que automáticamente se toma el data frame que resulta de la operación anterior.\n\n:::{#exm-tuberías-1}\n\n\n\n::: {.cell hash='06-preprocesamiento_cache/epub/unnamed-chunk-13_da3f518bf234bfb76f3a6790d82a1d06'}\n\n```{.r .cell-code}\nlibrary(dplyr)\ndf <- read.csv('https://raw.githubusercontent.com/asalber/manual-r/master/datos/colesterol.csv')\n# Inicio de la tubería\ndf %>% \n    # Seleccionar sexo, edad y colesterol\n    select(sexo, edad, colesterol) %>%\n    # Filtrar mayores de 30 años\n    filter(edad > 30) %>%\n    # Estratificar por sexo\n    group_by(sexo) %>%\n    # Calcular la media del colesterol\n    summarise(media_colesterol = mean(colesterol))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  sexo  media_colesterol\n  <chr>            <dbl>\n1 H                 249.\n2 M                 210.\n```\n:::\n:::\n\n\n\n:::\n\n## Ejercicios\n\n:::{#exr-preprocesamiento-1}\nEl fichero [`genetica`](https://raw.githubusercontent.com/asalber/manual-r/master/datos/genetica.csv), contiene información de la análitica fisiológica, microbiológica y bioquímica, de una muestra de ratas tratadas con distintos tratamientos.\n\na.  Crear un tibble con los datos del fichero.\n\n    :::{.callout-note collapse=\"true\"}\n    ## Solución \n\n\n\n    ::: {.cell hash='06-preprocesamiento_cache/epub/unnamed-chunk-14_20c8f933e0740a9b7c9c5c20d499b1f9'}\n    \n    ```{.r .cell-code}\n    library(tidyverse)\n    df <- read_csv('https://raw.githubusercontent.com/asalber/manual-r/master/datos/genetica.csv')\n    df\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 21 × 20\n       `código muestra` Tratamiento  `mas cor (g)`    IHS     IES     ITS     IAS\n       <chr>            <chr>                <dbl>  <dbl>   <dbl>   <dbl>   <dbl>\n     1 Ct-A1            Control               236  0.0433 0.00198 0.00178 0.00043\n     2 Ct-A2            Control               202. 0.044  0.002   0.0017  0.0008 \n     3 Ct-B1            Control               246. 0.042  0.002   0.0015  0.0005 \n     4 Ct-B2            Control               237. 0.0475 0.00238 0.00203 0.00041\n     5 Ct-B3            Control               231. 0.0499 0.002   0.0011  0.0005 \n     6 Ct-C1            Control               235. 0.05   0.0021  0.0033  0.0014 \n     7 Ct-C2            Control               228. 0.05   0.0018  0.0031  0.00059\n     8 Dx-1             Dexametasona          181. 0.061  0.00155 0.0005  0.00012\n     9 Dx-2             Dexametasona          198. 0.063  0.00191 0.0011  0.0002 \n    10 Dx-3             Dexametasona          201. 0.0577 0.0017  0.0001  0.0001 \n    # ℹ 11 more rows\n    # ℹ 13 more variables: `glucog(mg/g)` <dbl>, `pbmc(cel/mL)` <dbl>,\n    #   `CD4(cel/µL)` <dbl>, `monoc(cel/mL)` <dbl>, `IHQ: linfB(cel/mm2)` <dbl>,\n    #   `pulp.blan(Tx1)` <dbl>, `microorg(log nº/g)` <dbl>, `AI2(absorb)` <dbl>,\n    #   `gluc(mmol/L)` <dbl>, `TAG(mmol/L)` <dbl>, `col(mmol/L)` <dbl>,\n    #   `HDL(mmol/L)` <dbl>, `ins(pmol/L)` <dbl>\n    ```\n    :::\n    :::\n\n\n\n    :::\n\na.  Convertir el tratamiento en un factor.\n\n    :::{.callout-note collapse=\"true\"}\n    ## Solución \n\n\n\n    ::: {.cell hash='06-preprocesamiento_cache/epub/unnamed-chunk-15_7d7becc5d4470d51fb0b5d77096b6b5c'}\n    \n    ```{.r .cell-code}\n    df <- mutate(df, Tratamiento = factor(Tratamiento))\n    ```\n    :::\n\n\n\n    :::\n\na.  Calcular el tamaño muestral de cada grupo de tratamiento\n\n    :::{.callout-note collapse=\"true\"}\n    ## Solución \n\n\n\n    ::: {.cell hash='06-preprocesamiento_cache/epub/unnamed-chunk-16_aa42d1da59c38d169d09fdb4e345f236'}\n    \n    ```{.r .cell-code}\n    count(df, Tratamiento)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 3 × 2\n      Tratamiento      n\n      <fct>        <int>\n    1 Control          7\n    2 Dexametasona     7\n    3 Kanamicina       7\n    ```\n    :::\n    :::\n\n\n\n    :::\n\na.  Filtrar las ratas de grupo control con una masa corporal (`mas cor (g)`) mayor de 230 g.\n\n    :::{.callout-note collapse=\"true\"}\n    ## Solución \n\n\n\n    ::: {.cell hash='06-preprocesamiento_cache/epub/unnamed-chunk-17_b704e6f3f860ea93204b3cea2b6115a7'}\n    \n    ```{.r .cell-code}\n    filter(df, Tratamiento == \"Control\" & `mas cor (g)` > 230)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 5 × 20\n      `código muestra` Tratamiento `mas cor (g)`    IHS     IES     ITS     IAS\n      <chr>            <fct>               <dbl>  <dbl>   <dbl>   <dbl>   <dbl>\n    1 Ct-A1            Control              236  0.0433 0.00198 0.00178 0.00043\n    2 Ct-B1            Control              246. 0.042  0.002   0.0015  0.0005 \n    3 Ct-B2            Control              237. 0.0475 0.00238 0.00203 0.00041\n    4 Ct-B3            Control              231. 0.0499 0.002   0.0011  0.0005 \n    5 Ct-C1            Control              235. 0.05   0.0021  0.0033  0.0014 \n    # ℹ 13 more variables: `glucog(mg/g)` <dbl>, `pbmc(cel/mL)` <dbl>,\n    #   `CD4(cel/µL)` <dbl>, `monoc(cel/mL)` <dbl>, `IHQ: linfB(cel/mm2)` <dbl>,\n    #   `pulp.blan(Tx1)` <dbl>, `microorg(log nº/g)` <dbl>, `AI2(absorb)` <dbl>,\n    #   `gluc(mmol/L)` <dbl>, `TAG(mmol/L)` <dbl>, `col(mmol/L)` <dbl>,\n    #   `HDL(mmol/L)` <dbl>, `ins(pmol/L)` <dbl>\n    ```\n    :::\n    :::\n\n\n\n    :::\n\na.  Calcular la media y la desviación típica de la masa corporal (`mas cor (g)`) para cada tratamiento.\n\n    :::{.callout-note collapse=\"true\"}\n    ## Solución \n\n\n\n    ::: {.cell hash='06-preprocesamiento_cache/epub/unnamed-chunk-18_fc91e07882a91c4affe8a42cf2af3a82'}\n    \n    ```{.r .cell-code}\n    df %>%\n        group_by(Tratamiento) %>%\n        summarise(media = mean(`mas cor (g)`), desv.est = sd(`mas cor (g)`))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 3 × 3\n      Tratamiento  media desv.est\n      <fct>        <dbl>    <dbl>\n    1 Control       231.     13.6\n    2 Dexametasona  191.     14.2\n    3 Kanamicina    229.     13.9\n    ```\n    :::\n    :::\n\n\n\n    :::\n\na.  Calcular la media y la desviación típica de todas las variables para cada tratamiento.\n\n    :::{.callout-note collapse=\"true\"}\n    ## Solución \n\n\n\n    ::: {.cell hash='06-preprocesamiento_cache/epub/unnamed-chunk-19_18935c6b79eed6f8266caa753c6c3bf3'}\n    \n    ```{.r .cell-code}\n    df %>%\n        pivot_longer(-c(`código muestra`, Tratamiento), names_to = \"Variable\", values_to = \"Valor\") %>%\n        group_by(Variable) %>%\n        summarise(media = mean(Valor), desv.est = sd(Valor))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 18 × 3\n       Variable              media desv.est\n       <chr>                 <dbl>    <dbl>\n     1 AI2(absorb)         2.86e-1  1.63e-1\n     2 CD4(cel/µL)         1.05e+3  1.50e+3\n     3 HDL(mmol/L)         1.49e+0  6.20e-1\n     4 IAS                 5.26e-4  3.92e-4\n     5 IES                 1.96e-3  1.96e-4\n     6 IHQ: linfB(cel/mm2) 7.95e+1  7.62e+1\n     7 IHS                 5.14e-2  7.12e-3\n     8 ITS                 1.80e-3  8.63e-4\n     9 TAG(mmol/L)         3.98e+0  2.09e+0\n    10 col(mmol/L)         2.44e+0  1.29e+0\n    11 gluc(mmol/L)        3.57e+1  1.88e+1\n    12 glucog(mg/g)        7.83e+1  3.81e+1\n    13 ins(pmol/L)         1.91e+2  1.05e+2\n    14 mas cor (g)         2.17e+2  2.28e+1\n    15 microorg(log nº/g)  2.35e+0  1.61e+0\n    16 monoc(cel/mL)       1.32e+4  4.68e+3\n    17 pbmc(cel/mL)        1.27e+7  2.10e+7\n    18 pulp.blan(Tx1)      2.75e-1  1.12e-1\n    ```\n    :::\n    :::\n\n\n\n    :::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}